const { Telegraf, Markup, session } = require('telegraf');
const fs = require('fs-extra');
const path = require('path');
const axios = require('axios');
require('dotenv').config();

const YandexDisk = require('./yandexDisk');

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = parseInt(process.env.ADMIN_ID);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
const yandexDisk = new YandexDisk(process.env.YANDEX_ACCESS_TOKEN);

// –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
fs.ensureDirSync('./data/candidates');
fs.ensureDirSync('./temp_voices');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –±–ª–æ–∫–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
let interviewBlocks = [];
try {
  interviewBlocks = require('./data/blocks.json');
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ blocks.json:', error);
  interviewBlocks = [
    {
      type: "technical",
      text: "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª–æ–∫–æ–≤. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω."
    }
  ];
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
let yandexDiskEnabled = false;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function initializeYandexDisk() {
  try {
    const tokenCheck = await yandexDisk.checkToken();
    if (tokenCheck.success) {
      yandexDiskEnabled = true;
      console.log('‚úÖ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
    } else {
      yandexDiskEnabled = false;
      console.log('‚ùå –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
    }
  } catch (error) {
    yandexDiskEnabled = false;
    console.log('‚ùå –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
  }
}

// –°–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot.use(session({ 
  defaultSession: () => ({ 
    currentBlock: 0,
    currentMessageNumber: 1,
    hasAnswered: false,
    username: 'unknown',
    userId: null,
    isCompleted: false,
    userFolderPath: '',
    yandexFolderPath: '',
    yandexFolderCreated: false
  })
}));

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
function getUserFolderInfo(userId, username) {
  const cleanUsername = (username || 'unknown').toLowerCase().replace(/[^a-z0-9_]/g, '_');
  const folderName = `${cleanUsername}_${getCurrentDate()}`;
  const localFolderPath = path.join('./data/candidates', `${cleanUsername}_${userId}`);
  const yandexFolderPath = `/interview_bot/${folderName}`;
  
  return { localFolderPath, yandexFolderPath, folderName };
}

function getCurrentDate() {
  return new Date().toISOString().split('T')[0];
}

async function downloadAndSaveVoice(ctx, localFolderPath, fileName) {
  await fs.ensureDir(localFolderPath);
  
  const voice = ctx.message.voice;
  const file = await ctx.telegram.getFile(voice.file_id);
  const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
  
  // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const response = await axios({
    method: 'GET',
    url: fileUrl,
    responseType: 'stream'
  });

  const localFilePath = path.join(localFolderPath, fileName);
  const writer = fs.createWriteStream(localFilePath);

  response.data.pipe(writer);

  return new Promise((resolve, reject) => {
    writer.on('finish', () => resolve(localFilePath));
    writer.on('error', reject);
  });
}

async function saveVoiceMessage(ctx, userFolderInfo, fileName) {
  const { localFolderPath, yandexFolderPath } = userFolderInfo;
  
  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    const localFilePath = await downloadAndSaveVoice(ctx, localFolderPath, fileName);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    let uploadedToYandex = false;
    if (yandexDiskEnabled && ctx.session.yandexFolderCreated) {
      try {
        const remoteFilePath = `${yandexFolderPath}/${fileName}`;
        const uploadResult = await yandexDisk.uploadFile(localFilePath, remoteFilePath);
        uploadedToYandex = uploadResult.success;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:', error);
        uploadedToYandex = false;
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metaData = {
      fileName,
      localPath: localFilePath,
      yandexPath: yandexDiskEnabled ? `${yandexFolderPath}/${fileName}` : null,
      timestamp: new Date().toISOString(),
      block: ctx.session.currentBlock,
      messageNumber: ctx.session.currentMessageNumber,
      uploadedToYandex: uploadedToYandex,
      fileSize: ctx.message.voice.file_size,
      duration: ctx.message.voice.duration
    };
    
    await fs.writeJson(path.join(localFolderPath, `${fileName}.json`), metaData);
    
    return metaData;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function getCandidatesStats() {
  try {
    const candidates = fs.readdirSync('./data/candidates');
    const completed = candidates.filter(folder => {
      const metaPath = path.join('./data/candidates', folder, 'completed.json');
      return fs.existsSync(metaPath);
    });
    
    const active = candidates.filter(folder => {
      const metaPath = path.join('./data/candidates', folder, 'completed.json');
      return !fs.existsSync(metaPath);
    });
    
    return { total: candidates.length, completed: completed.length, active: active.length };
  } catch (error) {
    return { total: 0, completed: 0, active: 0 };
  }
}

// –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
async function showCurrentBlock(ctx) {
  const session = ctx.session;
  
  if (session.currentBlock >= interviewBlocks.length) {
    await completeInterview(ctx);
    return;
  }

  const currentBlock = interviewBlocks[session.currentBlock];
  
  if (!currentBlock) {
    await completeInterview(ctx);
    return;
  }

  if (currentBlock.type === 'technical') {
    await ctx.reply(currentBlock.text, 
      Markup.keyboard([['–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫']]).resize()
    );
  } else {
    const keyboard = session.hasAnswered 
      ? Markup.keyboard([['–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫']]).resize()
      : Markup.removeKeyboard();
    
    await ctx.reply(currentBlock.text, keyboard);
  }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
async function completeInterview(ctx) {
  const session = ctx.session;
  session.isCompleted = true;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
  const userFolder = session.userFolderPath;
  await fs.writeJson(path.join(userFolder, 'completed.json'), {
    completedAt: new Date().toISOString(),
    totalBlocks: interviewBlocks.length,
    username: session.username,
    userId: session.userId,
    totalAnswers: session.currentMessageNumber - 1
  });

  let folderUrl = session.userFolderPath;
  
  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
  if (yandexDiskEnabled && session.yandexFolderCreated) {
    try {
      const publishResult = await yandexDisk.publishFolder(session.yandexFolderPath);
      if (publishResult.success) {
        folderUrl = publishResult.publicUrl;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞–ø–∫–∏:', error);
    }
  }
  
  await ctx.reply(
    '‚úÖ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.', 
    Markup.removeKeyboard()
  );
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
  await notifyAdmin(ctx, folderUrl);
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
async function notifyAdmin(ctx, folderUrl) {
  const session = ctx.session;
  const stats = getCandidatesStats();
  
  const storageStatus = yandexDiskEnabled ? '–Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ ‚úÖ' : '–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ üíæ';
  
  const message = `üìä –ù–æ–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!\n` +
                 `üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: @${session.username} (ID: ${session.userId})\n` +
                 `üìÅ –ü–∞–ø–∫–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏: ${folderUrl}\n` +
                 `üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.completed} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, ${stats.active} –∞–∫—Ç–∏–≤–Ω–æ\n` +
                 `üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ${storageStatus}`;
  
  await bot.telegram.sendMessage(ADMIN_ID, message);
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
  if (ctx.from.id === ADMIN_ID) {
    await showAdminPanel(ctx);
    return;
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  const userFolderInfo = getUserFolderInfo(ctx.from.id, ctx.from.username || 'unknown');
  
  ctx.session.currentBlock = 0;
  ctx.session.currentMessageNumber = 1;
  ctx.session.hasAnswered = false;
  ctx.session.username = ctx.from.username || 'unknown';
  ctx.session.userId = ctx.from.id;
  ctx.session.isCompleted = false;
  ctx.session.userFolderPath = userFolderInfo.localFolderPath;
  ctx.session.yandexFolderPath = userFolderInfo.yandexFolderPath;
  ctx.session.yandexFolderCreated = false;
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
  if (yandexDiskEnabled) {
    try {
      await yandexDisk.createFolder(userFolderInfo.yandexFolderPath);
      ctx.session.yandexFolderCreated = true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ:', error);
      ctx.session.yandexFolderCreated = false;
    }
  }
  
  await ctx.reply('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!');
  await showCurrentBlock(ctx);
});

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async function showAdminPanel(ctx) {
  const stats = getCandidatesStats();
  const totalBlocks = interviewBlocks.length;
  const technicalBlocks = interviewBlocks.filter(b => b.type === 'technical').length;
  const questionBlocks = interviewBlocks.filter(b => b.type === 'question').length;
  
  const storageStatus = yandexDiskEnabled ? '–Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ ‚úÖ' : '–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ üíæ';
  
  const message = `üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n` +
                 `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
                 `‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: ${stats.total}\n` +
                 `‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏: ${stats.completed}\n` +
                 `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active}\n\n` +
                 `üìù –ë–ª–æ–∫–æ–≤ –≤ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏: ${totalBlocks}\n` +
                 `‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö: ${technicalBlocks}\n` +
                 `‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤: ${questionBlocks}\n\n` +
                 `üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ${storageStatus}`;

  await ctx.reply(message, 
    Markup.keyboard([
      ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–æ–∫–∏'],
      ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫–∏', 'üÜï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫']
    ]).resize()
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  await showAdminPanel(ctx);
});

bot.hears('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–æ–∫–∏', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  
  let message = 'üìã –¢–µ–∫—É—â–∏–µ –±–ª–æ–∫–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:\n\n';
  interviewBlocks.forEach((block, index) => {
    const typeIcon = block.type === 'technical' ? 'üéØ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô' : '‚ùì –í–û–ü–†–û–°';
    const shortText = block.text.length > 80 ? block.text.substring(0, 80) + '...' : block.text;
    message += `${index + 1}. ${typeIcon}\n${shortText}\n\n`;
  });
  
  await ctx.reply(message);
});

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
bot.hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫–∏', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  await ctx.reply('‚úèÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
});

bot.hears('üÜï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  await ctx.reply('üÜï –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
});

// –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
bot.on('voice', async (ctx) => {
  if (ctx.from.id === ADMIN_ID) return;
  
  const session = ctx.session;
  if (!session || session.isCompleted) {
    return ctx.reply('‚ùå –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–æ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
  }

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Å—Å–∏–≤–∞
  if (session.currentBlock >= interviewBlocks.length) {
    await completeInterview(ctx);
    return;
  }

  const currentBlock = interviewBlocks[session.currentBlock];
  if (!currentBlock || currentBlock.type !== 'question') {
    return ctx.reply('‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –≤–æ–ø—Ä–æ—Å—É.');
  }

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const userFolderInfo = {
      localFolderPath: session.userFolderPath,
      yandexFolderPath: session.yandexFolderPath
    };
    
    const fileName = `${session.currentBlock}.${session.currentMessageNumber}.ogg`;
    await saveVoiceMessage(ctx, userFolderInfo, fileName);
    
    session.currentMessageNumber++;
    
    // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    if (!session.hasAnswered) {
      session.hasAnswered = true;
      await ctx.reply(
        `‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω (${fileName})! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.`,
        Markup.keyboard([['–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫']]).resize()
      );
    } else {
      await ctx.reply(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω (${fileName})!`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫"
bot.hears('–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫', async (ctx) => {
  if (ctx.from.id === ADMIN_ID) return;
  
  const session = ctx.session;
  if (!session) return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è');

  // ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  if (session.isCompleted) {
    return ctx.reply('‚úÖ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ.');
  }

  // ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Å—Å–∏–≤–∞
  if (session.currentBlock >= interviewBlocks.length) {
    await completeInterview(ctx);
    return;
  }

  const currentBlock = interviewBlocks[session.currentBlock];
  
  // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
  if (!currentBlock) {
    await completeInterview(ctx);
    return;
  }

  // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
  if (currentBlock.type === 'question' && !session.hasAnswered) {
    return ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
  session.currentBlock++;
  session.currentMessageNumber = 1;
  session.hasAnswered = false;
  
  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ª–∏ —Å–µ–π—á–∞—Å
  if (session.currentBlock >= interviewBlocks.length) {
    await completeInterview(ctx);
  } else {
    await showCurrentBlock(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ)
bot.on('text', async (ctx) => {
  if (ctx.from.id === ADMIN_ID) return;
  if (ctx.message.text !== '–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫') {
    await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
initializeYandexDisk().then(() => {
  bot.launch().then(() => {
    console.log('ü§ñ –ë–æ—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!');
    console.log('üëë –ê–¥–º–∏–Ω ID:', ADMIN_ID);
    console.log('üíæ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:', yandexDiskEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω');
  });
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
