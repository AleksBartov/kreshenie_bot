const { Telegraf, Markup, session } = require("telegraf");
const fs = require("fs-extra");
const path = require("path");
const axios = require("axios");
require("dotenv").config();

const YandexDisk = require("./yandexDisk");

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = parseInt(process.env.ADMIN_ID);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
const yandexDisk = new YandexDisk(process.env.YANDEX_ACCESS_TOKEN);

// –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
fs.ensureDirSync("./data/candidates");
fs.ensureDirSync("./temp_voices");

// –ó–∞–≥—Ä—É–∂–∞–µ–º –±–ª–æ–∫–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
let interviewBlocks = [];
try {
  interviewBlocks = require("./data/blocks.json");
} catch (error) {
  console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ blocks.json:", error);
}

// –°–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot.use(
  session({
    defaultSession: () => ({
      currentBlock: 0,
      currentMessageNumber: 1,
      hasAnswered: false,
      username: "unknown",
      userId: null,
      isCompleted: false,
      userFolderPath: "",
      yandexFolderPath: "",
    }),
  })
);

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
function getUserFolderInfo(userId, username) {
  const folderName = `${username}_${getCurrentDate()}.toLowerCase().replace(/[^a-z0-9_]/g, '_')`;
  const localFolderPath = path.join(
    "./data/candidates",
    `${username}_${userId}`
  );
  const yandexFolderPath = `/interview_bot/${folderName}`;

  return { localFolderPath, yandexFolderPath, folderName };
}

function getCurrentDate() {
  return new Date().toISOString().split("T")[0];
}

async function downloadAndSaveVoice(ctx, localFolderPath, fileName) {
  await fs.ensureDir(localFolderPath);

  const voice = ctx.message.voice;
  const file = await ctx.telegram.getFile(voice.file_id);
  const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;

  // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const response = await axios({
    method: "GET",
    url: fileUrl,
    responseType: "stream",
  });

  const localFilePath = path.join(localFolderPath, fileName);
  const writer = fs.createWriteStream(localFilePath);

  response.data.pipe(writer);

  return new Promise((resolve, reject) => {
    writer.on("finish", () => resolve(localFilePath));
    writer.on("error", reject);
  });
}

async function saveVoiceMessage(ctx, userFolderInfo, fileName) {
  const { localFolderPath, yandexFolderPath } = userFolderInfo;

  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    const localFilePath = await downloadAndSaveVoice(
      ctx,
      localFolderPath,
      fileName
    );

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!ctx.session.yandexFolderCreated) {
      await yandexDisk.createFolder(yandexFolderPath);
      ctx.session.yandexFolderCreated = true;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    const remoteFilePath = `${yandexFolderPath}/${fileName}`;
    const uploadResult = await yandexDisk.uploadFile(
      localFilePath,
      remoteFilePath
    );

    if (!uploadResult.success) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:", uploadResult.error);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metaData = {
      fileName,
      localPath: localFilePath,
      yandexPath: remoteFilePath,
      timestamp: new Date().toISOString(),
      block: ctx.session.currentBlock,
      messageNumber: ctx.session.currentMessageNumber,
      uploadedToYandex: uploadResult.success,
    };

    await fs.writeJson(
      path.join(localFolderPath, `${fileName}.json`),
      metaData
    );

    return metaData;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function getCandidatesStats() {
  try {
    const candidates = fs.readdirSync("./data/candidates");
    const completed = candidates.filter((folder) => {
      const metaPath = path.join("./data/candidates", folder, "completed.json");
      return fs.existsSync(metaPath);
    });

    const active = candidates.filter((folder) => {
      const metaPath = path.join("./data/candidates", folder, "completed.json");
      return !fs.existsSync(metaPath);
    });

    return {
      total: candidates.length,
      completed: completed.length,
      active: active.length,
    };
  } catch (error) {
    return { total: 0, completed: 0, active: 0 };
  }
}

// –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
async function showCurrentBlock(ctx) {
  const session = ctx.session;

  if (session.currentBlock >= interviewBlocks.length) {
    // –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    await ctx.reply("‚úÖ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.");
    session.isCompleted = true;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    const userFolder = session.userFolderPath;
    await fs.writeJson(path.join(userFolder, "completed.json"), {
      completedAt: new Date().toISOString(),
      totalBlocks: interviewBlocks.length,
      username: session.username,
      userId: session.userId,
    });

    // –ü—É–±–ª–∏–∫—É–µ–º –ø–∞–ø–∫—É –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
    const publishResult = await yandexDisk.publishFolder(
      session.yandexFolderPath
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await notifyAdmin(ctx, publishResult.publicUrl || session.yandexFolderPath);
    return;
  }

  const currentBlock = interviewBlocks[session.currentBlock];

  if (currentBlock.type === "technical") {
    await ctx.reply(
      currentBlock.text,
      Markup.keyboard([["–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫"]]).resize()
    );
  } else {
    const keyboard = session.hasAnswered
      ? Markup.keyboard([["–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫"]]).resize()
      : Markup.removeKeyboard();

    await ctx.reply(currentBlock.text, keyboard);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
async function notifyAdmin(ctx, folderUrl) {
  const session = ctx.session;
  const stats = getCandidatesStats();

  const message = `üìä –ù–æ–≤–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!\n +
                 üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: @${session.username} (ID: ${session.userId})\n +
                 üìÅ –ü–∞–ø–∫–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏: ${folderUrl}\n +
                 üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.completed} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, ${stats.active} –∞–∫—Ç–∏–≤–Ω–æ`;

  await bot.telegram.sendMessage(ADMIN_ID, message);
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
  if (ctx.from.id === ADMIN_ID) {
    await showAdminPanel(ctx);
    return;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  const userFolderInfo = getUserFolderInfo(
    ctx.from.id,
    ctx.from.username || "unknown"
  );

  ctx.session.currentBlock = 0;
  ctx.session.currentMessageNumber = 1;
  ctx.session.hasAnswered = false;
  ctx.session.username = ctx.from.username || "unknown";
  ctx.session.userId = ctx.from.id;
  ctx.session.isCompleted = false;
  ctx.session.userFolderPath = userFolderInfo.localFolderPath;
  ctx.session.yandexFolderPath = userFolderInfo.yandexFolderPath;
  ctx.session.yandexFolderCreated = false;

  await ctx.reply("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!");
  await showCurrentBlock(ctx);
});

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async function showAdminPanel(ctx) {
  const stats = getCandidatesStats();
  const totalBlocks = interviewBlocks.length;

  const message = `üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n +
                 üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n +
                 ‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: ${stats.total}\n +
                 ‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏: ${stats.completed}\n +
                 ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active}\n\n +
                 üìù –ë–ª–æ–∫–æ–≤ –≤ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏: ${totalBlocks}\n +
                 ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö: ${
                   interviewBlocks.filter((b) => b.type === "technical").length
                 }\n +
                 ‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤: ${
                   interviewBlocks.filter((b) => b.type === "question").length
                 }\n\n +
                 ‚òÅÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ: –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫`;

  await ctx.reply(
    message,
    Markup.keyboard([
      ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫–∏"],
      ["üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–æ–∫–∏", "üÜï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫"],
    ]).resize()
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
bot.hears("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  await showAdminPanel(ctx);
});

bot.hears("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–æ–∫–∏", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;

  let message = "üìã –¢–µ–∫—É—â–∏–µ –±–ª–æ–∫–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:\n\n";
  interviewBlocks.forEach((block, index) => {
    const typeIcon =
      block.type === "technical" ? "üéØ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô" : "‚ùì –í–û–ü–†–û–°";
    message += `${index + 1}. ${typeIcon}\n${block.text.substring(
      0,
      80
    )}...\n\n`;
  });

  await ctx.reply(message);
});
// –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
bot.on("voice", async (ctx) => {
  if (ctx.from.id === ADMIN_ID) return;

  const session = ctx.session;
  if (!session || session.isCompleted) {
    return ctx.reply(
      "‚ùå –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–æ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    );
  }

  const currentBlock = interviewBlocks[session.currentBlock];
  if (currentBlock.type !== "question") {
    return ctx.reply("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –≤–æ–ø—Ä–æ—Å—É.");
  }

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const userFolderInfo = {
      localFolderPath: session.userFolderPath,
      yandexFolderPath: session.yandexFolderPath,
    };

    const fileName = `${session.currentBlock}.${session.currentMessageNumber}.ogg`;
    await saveVoiceMessage(ctx, userFolderInfo, fileName);

    session.currentMessageNumber++;

    // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    if (!session.hasAnswered) {
      session.hasAnswered = true;
      await ctx.reply(
        `‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω (${fileName})! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.`,
        Markup.keyboard([["–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫"]]).resize()
      );
    } else {
      await ctx.reply(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω (${fileName})!`);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    await ctx.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
});

// –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫"
bot.hears("–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫", async (ctx) => {
  if (ctx.from.id === ADMIN_ID) return;

  const session = ctx.session;
  if (!session)
    return ctx.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è");

  const currentBlock = interviewBlocks[session.currentBlock];

  // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
  if (currentBlock.type === "question" && !session.hasAnswered) {
    return ctx.reply(
      "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    );
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
  session.currentBlock++;
  session.currentMessageNumber = 1;
  session.hasAnswered = false;

  await showCurrentBlock(ctx);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log("ü§ñ –ë–æ—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!");
  console.log("üëë –ê–¥–º–∏–Ω ID:", ADMIN_ID);
  console.log("‚òÅÔ∏è –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º");
});

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));