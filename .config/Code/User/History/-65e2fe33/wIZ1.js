
import { CONFIG, globalMonitoringActive, lastCheckedGrades, setMonitoringState, allUsers } from '../config/index.js';
import { getRecentGrades } from './dnevnik-api.js';
import { findNewGrades } from '../utils/helpers.js';
import { formatGradesMessage } from '../utils/formatters.js';

export const checkForNewGrades = async (bot) => {
  if (!globalMonitoringActive) return;
  
  try {
    let anyNewGrades = false;
    setMonitoringState(true, false);
    
    for (const [childName, childData] of Object.entries(CONFIG.children)) {
      try {
        const currentGrades = await getRecentGrades(childData.id);
        const lastGrades = lastCheckedGrades.get(childName) || [];
        const newGrades = findNewGrades(lastGrades, currentGrades);
        
        if (newGrades.length > 0) {
          const message = formatGradesMessage(childName, newGrades);
          await sendToAllUsers(bot, message);
          console.log(`üì® –ù–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è ${childName}: ${newGrades.length} —à—Ç. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${allUsers.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
          anyNewGrades = true;
        }
        
        lastCheckedGrades.set(childName, currentGrades);
        
      } catch (error) {
        if (error.message === 'AUTH_ERROR') {
          console.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${childName}`);
          try {
            await bot.telegram.sendMessage(CONFIG.adminId, 
              'üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.'
            );
          } catch (adminError) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ:', adminError.message);
          }
        } else if (error.message === 'SERVER_ERROR') {
          console.error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è ${childName}`);
        } else {
          console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${childName}:`, error.message);
        }
      }
      
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    if (!anyNewGrades) {
      console.log('‚úÖ –ù–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫ –Ω–µ—Ç —É –≤—Å–µ—Ö –¥–µ—Ç–µ–π');
    }
    
  } catch (error) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
  } finally {
    if (globalMonitoringActive) {
      setTimeout(() => checkForNewGrades(bot), CONFIG.checkInterval);
    }
  }
};

const sendToAllUsers = async (bot, message) => {
  const failedUsers = [];
  
  const sendPromises = Array.from(allUsers).map(async (userId) => {
    try {
      await bot.telegram.sendMessage(userId, message);
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
      return { userId, success: true };
    } catch (error) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
      
      if (error.description && (
        error.description.includes('bot was blocked') || 
        error.description.includes('chat not found') ||
        error.description.includes('user is deactivated')
      )) {
        failedUsers.push(userId);
      }
      
      return { userId, success: false, error };
    }
  });
  
  const results = await Promise.all(sendPromises);
  
  if (failedUsers.length > 0) {
    failedUsers.forEach(userId => {
      allUsers.delete(userId);
    });
    console.log(`üóë –£–¥–∞–ª–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${failedUsers.join(', ')}`);
  }
  
  const successfulSends = results.filter(result => result.success).length;
  const failedSends = results.length - successfulSends;
  
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${successfulSends} —É—Å–ø–µ—à–Ω–æ, ${failedSends} —Å –æ—à–∏–±–∫–∞–º–∏`);
  
  return {
    total: results.length,
    successful: successfulSends,
    failed: failedSends,
    failedUsers: failedUsers
  };
};

export const initializeMonitoring = async (bot) => {
  try {
    let initializedCount = 0;
    
    for (const [childName, childData] of Object.entries(CONFIG.children)) {
      const currentGrades = await getRecentGrades(childData.id);
      lastCheckedGrades.set(childName, currentGrades);
      console.log(`üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –±–∞–∑–∞ –¥–ª—è ${childName}: ${currentGrades.length} –æ—Ü–µ–Ω–æ–∫`);
      initializedCount += currentGrades.length;
      
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    if (allUsers.size > 0) {
      const welcomeMessage = 'üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ü–µ–Ω–æ–∫ –∑–∞–ø—É—â–µ–Ω! –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö.';
      await sendToAllUsers(bot, welcomeMessage);
    }
    
    return initializedCount;
    
  } catch (error) {
    setMonitoringState(false, true);
    throw error;
  }
};

export const sendSystemMessageToAll = async (bot, message) => {
  return await sendToAllUsers(bot, `‚ÑπÔ∏è ${message}`);
};

export const sendToAdmin = async (bot, message) => {
  try {
    await bot.telegram.sendMessage(CONFIG.adminId, message);
    return true;
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:', error.message);
    return false;
  }
};
