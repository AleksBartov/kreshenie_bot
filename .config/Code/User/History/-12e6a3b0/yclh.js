const axios = require('axios');

// –í–∞—à–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5ZDg1MWJiZC05YzljLTQ4NTctYjI0OC0xNDBkNTYzMmFmODQiLCJleHAiOjE3NjAzODgxNzEsImlhdCI6MTc2MDM4NzY5MSwiZXNrIjoiZGIzYzJjZjUtMmUwZi00M2E2LThhMzMtY2RhNTgzOTFkOGI3IiwiZXNhaWQiOiI3NDk3NTYxODg1IiwiZWlkIjoiMTA4NzM3OTg4MyJ9.IArB4TASqE5l8vrLWc2b5AihvH_771UPyh8sqLxAEv0";
const ssoKey = "db3c2cf5-2e0f-43a6-8a33-cda58391d8b7";

// –ö—É–∫–∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç
const cookies = {
  '_ga': 'GA1.2.899629649.1760383314',
  '_gid': 'GA1.2.1649209595.1760383314', 
  '_ym_uid': '1760383318884942455',
  '_ym_d': '1760383318',
  '_ym_isad': '1',
  'sso-key': ssoKey,
  'X-JWT-Token': token
};

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –∫—É–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
const cookieString = Object.entries(cookies)
  .map(([key, value]) => `${key}=${value}`)
  .join('; ');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ axios
const api = axios.create({
  baseURL: 'https://dnevnik2.petersburgedu.ru',
  headers: {
    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
    'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    'Cookie': cookieString
  }
});



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
async function getGrades(dateFrom, dateTo) {
  try {
    console.log(`üìÖ –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ —Å ${dateFrom} –ø–æ ${dateTo}...\n`);
    
    const params = {
      'p_education[]': '741052',
      'p_date_from': dateFrom,
      'p_date_to': dateTo,
      'p_limit': 100,
      'p_page': 1
    };

    const response = await api.get('/api/journal/estimate/table', { params });
    
    if (response.data && response.data.data && response.data.data.items) {
      const items = response.data.data.items;
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${items.length} –æ—Ü–µ–Ω–æ–∫:\n`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –¥–∞—Ç–µ
      const gradesByDate = {};
      
      items.forEach(item => {
        const date = item.date;
        if (!gradesByDate[date]) {
          gradesByDate[date] = [];
        }
        
        gradesByDate[date].push({
          subject: item.subject_name,
          grade: item.estimate_value_name,
          type: item.estimate_type_name,
          comment: item.estimate_comment
        });
      });
      
      // –í—ã–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –¥–∞—Ç–∞–º
      Object.keys(gradesByDate).sort().forEach(date => {
        console.log(`üìÖ ${date}:`);
        gradesByDate[date].forEach(grade => {
          console.log(`   üìö ${grade.subject}: ${grade.grade} (${grade.type})`);
        });
        console.log('');
      });
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`   –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: ${items.length}`);
      console.log(`   –ü–µ—Ä–∏–æ–¥: ${dateFrom} - ${dateTo}`);
      
    } else {
      console.log('üìù –û—Ü–µ–Ω–æ–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç');
    }
    
    return response.data;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.response?.status || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫
async function getTodayGrades() {
  const today = new Date().toLocaleDateString('ru-RU');
  return await getGrades(today, today);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é
async function getWeekGrades() {
  const today = new Date();
  const weekAgo = new Date(today);
  weekAgo.setDate(today.getDate() - 7);
  
  const dateFrom = weekAgo.toLocaleDateString('ru-RU');
  const dateTo = today.toLocaleDateString('ru-RU');
  
  return await getGrades(dateFrom, dateTo);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –∑–∞ —Ç–µ–∫—É—â—É—é —á–µ—Ç–≤–µ—Ä—Ç—å
async function getQuarterGrades() {
  // –î–∞—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const dateFrom = '01.09.2025';
  const dateTo = '24.10.2025';
  
  return await getGrades(dateFrom, dateTo);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
async function getSubjects() {
  try {
    const today = new Date().toLocaleDateString('ru-RU');
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 30); // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    
    const params = {
      'p_education[]': '741052',
      'p_date_from': weekAgo.toLocaleDateString('ru-RU'),
      'p_date_to': today,
      'p_limit': 200,
      'p_page': 1
    };

    const response = await api.get('/api/journal/estimate/table', { params });
    
    if (response.data && response.data.data && response.data.data.items) {
      const subjects = new Set();
      
      response.data.data.items.forEach(item => {
        subjects.add(item.subject_name);
      });
      
      console.log('üìö –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã:');
      Array.from(subjects).sort().forEach((subject, index) => {
        console.log(`   ${index + 1}. ${subject}`);
      });
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}
// –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
async function main() {
  console.log('üéì –≠–õ–ï–ö–¢–†–û–ù–ù–´–ô –î–ù–ï–í–ù–ò–ö - –°–ò–°–¢–ï–ú–ê –û–¶–ï–ù–û–ö\n');
  
  // 1. –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
  console.log('1. üìÖ –°–ï–ì–û–î–ù–Ø–®–ù–ò–ï –û–¶–ï–ù–ö–ò');
  await getTodayGrades();
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // 2. –û—Ü–µ–Ω–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
  console.log('2. üìÖ –û–¶–ï–ù–ö–ò –ó–ê –ù–ï–î–ï–õ–Æ');
  await getWeekGrades();
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // 3. –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
  console.log('3. üìö –í–°–ï –ü–†–ï–î–ú–ï–¢–´');
  await getSubjects();
}

// –ó–∞–ø—É—Å–∫
main();