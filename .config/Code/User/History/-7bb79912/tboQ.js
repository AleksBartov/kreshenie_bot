const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');

class YandexDisk {
  constructor(accessToken) {
    this.accessToken = accessToken;
    this.baseURL = 'https://cloud-api.yandex.net/v1/disk/resources';
    this.headers = {
      'Authorization': `OAuth ${this.accessToken}`,
      'Content-Type': 'application/json'
    };
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
  async createFolder(folderPath) {
    try {
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏: ${folderPath}`);
      
      const response = await axios.put(
        `${this.baseURL}?path=${encodeURIComponent(folderPath)}`,
        undefined,
        { headers: this.headers }
      );
      
      console.log('‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ');
      return { success: true, data: response.data };
    } catch (error) {
      if (error.response?.status === 409) {
        console.log('‚úÖ –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ');
        return { success: true, data: { message: 'Folder already exists' } };
      }
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:', error.response?.data || error.message);
      return { success: false, error: error.response?.data || error.message };
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
  async uploadFile(localFilePath, remoteFilePath) {
    try {
      console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: ${localFilePath} -> ${remoteFilePath}`);
      
      // 1. –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const folderPath = path.dirname(remoteFilePath);
      await this.createFolder(folderPath);

      // 2. –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      const uploadResponse = await axios.get(
        `${this.baseURL}/upload?path=${encodeURIComponent(remoteFilePath)}&overwrite=true`,
        { headers: this.headers }
      );

      const uploadUrl = uploadResponse.data.href;

      // 3. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º
      const fileBuffer = await fs.readFile(localFilePath);
      
      await axios.put(uploadUrl, fileBuffer, {
        headers: {
          'Content-Type': 'application/octet-stream',
          'Content-Length': fileBuffer.length
        },
        maxContentLength: Infinity,
        maxBodyLength: Infinity
      });

      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error.response?.data || error.message);
      return { 
        success: false, 
        error: error.response?.data || error.message 
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
  async folderExists(folderPath) {
    try {
      await axios.get(
        `${this.baseURL}?path=${encodeURIComponent(folderPath)}`, 
        { headers: this.headers }
      );
      return true;
    } catch (error) {
      if (error.response?.status === 404) {
        return false;
      }
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–∞–ø–∫—É (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
  async publishFolder(folderPath) {
    try {
      console.log(`üîó –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–∞–ø–∫–∏: ${folderPath}`);
      
      // 1. –ü—É–±–ª–∏–∫—É–µ–º –ø–∞–ø–∫—É
      await axios.put(
        `${this.baseURL}/publish?path=${encodeURIComponent(folderPath)}`, 
        null, // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º null
        { headers: this.headers }
      );

      // 2. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏
      await new Promise(resolve => setTimeout(resolve, 1000));

      // 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ
      const response = await axios.get(
        `${this.baseURL}?path=${encodeURIComponent(folderPath)}`, 
        { headers: this.headers }
      );

      const publicUrl = response.data.public_url || 
                       `https://disk.yandex.ru/client/disk${folderPath}`;

      console.log('‚úÖ –ü–∞–ø–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞:', publicUrl);
      return { success: true, publicUrl };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞–ø–∫–∏:', error.response?.data || error.message);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ—Ç—è –±—ã –ø—É—Ç—å –¥–∞–∂–µ –±–µ–∑ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
      return { 
        success: false, 
        publicUrl: `https://disk.yandex.ru/client/disk${folderPath}`,
        error: error.response?.data || error.message 
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  async checkToken() {
    try {
      await axios.get(
        `${this.baseURL}?path=/`, 
        { headers: this.headers }
      );
      return { success: true, message: '–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω' };
    } catch (error) {
      return { 
        success: false, 
        error: '–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: ' + (error.response?.data?.message || error.message) 
      };
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–∞–ø–æ–∫
  async ensureFolderStructure(basePath) {
    try {
      await this.createFolder('/interview_bot');
      console.log('‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫:', error);
      return { success: false, error: error.message };
    }
  }
}

module.exports = YandexDisk;