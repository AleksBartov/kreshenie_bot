import { config } from 'dotenv';
import axios from 'axios';
import { Telegraf, Markup } from 'telegraf';

config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5ZDg1MWJiZC05YzljLTQ4NTctYjI0OC0xNDBkNTYzMmFmODQiLCJleHAiOjE3NjA0Nzc1MjMsImlhdCI6MTc2MDQ3NzA0MywiZXNrIjoiZGIzYzJjZjUtMmUwZi00M2E2LThhMzMtY2RhNTgzOTFkOGI3IiwiZXNhaWQiOiI3NDk3NTYxODg1IiwiZWlkIjoiMTA4NzM3OTg4MyJ9.-gQqjpUWVQ8pRR5JgiXNoXMoXPugchU2ianIKqa4Zv4",
  ssoKey: "db3c2cf5-2e0f-43a6-8a33-cda58391d8b7",
  checkInterval: 300000, // 5 –º–∏–Ω—É—Ç
  adminId: process.env.ADMIN_ID || 123456789, // ID –∞–¥–º–∏–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  children: {
    "Varvara": { id: 614996, emoji: "üëß" },
    "Ivan": { id: 647827, emoji: "üë¶" },
    "Boris": { id: 741052, emoji: "üë∂" }
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
let globalMonitoringActive = false;
let lastCheckedGrades = new Map();
let authError = false;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ axios —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const createApiClient = () => {
  const cookies = {
    'sso-key': CONFIG.ssoKey,
    'X-JWT-Token': CONFIG.token
  };

  const cookieString = Object.entries(cookies)
    .map(([key, value]) => `${key}=${value}`)
    .join('; ');

  return axios.create({
    baseURL: 'https://dnevnik2.petersburgedu.ru',
    headers: {
      'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
      'Accept': 'application/json, text/plain, */*',
      'Cookie': cookieString
    },
    timeout: 10000
  });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
const isAdmin = (userId) => {
  return userId === CONFIG.adminId;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥
const formatDate = (dateString) => {
  const date = new Date(dateString.split('.').reverse().join('-'));
  const today = new Date();
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);
  
  if (date.toDateString() === today.toDateString()) {
    return '–°–µ–≥–æ–¥–Ω—è';
  } else if (date.toDateString() === yesterday.toDateString()) {
    return '–í—á–µ—Ä–∞';
  } else {
    return date.toLocaleDateString('ru-RU', { 
      day: 'numeric', 
      month: 'long',
      year: 'numeric'
    });
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–∞–π–ª–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏
const getGradeEmoji = (grade) => {
  const gradeValue = parseInt(grade);
  if (isNaN(gradeValue)) {
    if (grade.includes('5')) return 'üéâ';
    if (grade.includes('4')) return 'üëç';
    if (grade.includes('3')) return 'üòê';
    if (grade.includes('2')) return 'üòû';
    if (grade.toLowerCase().includes('–∑–∞—á') || grade.toLowerCase().includes('—É—á')) return '‚úÖ';
    return '‚ùì';
  }
  
  if (gradeValue >= 4) return 'üéâ';
  if (gradeValue === 3) return 'üòê';
  if (gradeValue === 2) return 'üòû';
  return 'üíÄ';
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
const formatGrade = (grade) => {
  const emoji = getGradeEmoji(grade.estimate_value_name);
  const date = formatDate(grade.date);
  return `${grade.subject_name} - ${grade.estimate_value_name} ${emoji} (${date})`;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è
async function getRecentGrades(childId) {
  try {
    const api = createApiClient();
    const today = new Date();
    const twoDaysAgo = new Date(today);
    twoDaysAgo.setDate(today.getDate() - 2);
    
    const dateTo = today.toLocaleDateString('ru-RU');
    const dateFrom = twoDaysAgo.toLocaleDateString('ru-RU');
    
    const url = /api/journal/estimate/table?p_educations[]=${childId}&p_date_from=${dateFrom}&p_date_to=${dateTo}&p_limit=50&p_page=1;
    
    const response = await api.get(url);
    
    if (response.data?.data?.items) {
      return response.data.data.items
        .filter(item => {
          const itemDate = new Date(item.date.split('.').reverse().join('-'));
          const fromDate = new Date(twoDaysAgo);
          return itemDate >= fromDate;
        })
        .map(item => ({
          ...item,
          uniqueId: `${item.date}_${item.subject_id}_${item.estimate_value_name}_${item.estimate_type_name}`
        }));
    }
    
    return [];
    
  } catch (error) {
    if (error.response?.status === 401) {
      authError = true;
      throw new Error('AUTH_ERROR');
    }
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫:', error.message);
    throw error;
  }
}

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∏ –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö
function findNewGrades(oldGrades, newGrades) {
  if (!oldGrades || oldGrades.length === 0) return [];
  
  const oldIds = new Set(oldGrades.map(g => g.uniqueId));
  return newGrades.filter(grade => !oldIds.has(grade.uniqueId));
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
function formatGradesMessage(childName, grades) {
  if (grades.length === 0) {
    return `üìù –£ ${childName} ${CONFIG.children[childName].emoji} –Ω–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫`;
  }
  
  const header = `üéì –ù–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è ${childName} ${CONFIG.children[childName].emoji}:\n\n`;
  const gradesList = grades.map(grade => `‚Ä¢ ${formatGrade(grade)}`).join('\n');
  
  return header + gradesList;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function checkForNewGrades(bot) {
  if (!globalMonitoringActive) return;
  
  try {
    let anyNewGrades = false;
    authError = false;
    
    for (const [childName, childData] of Object.entries(CONFIG.children)) {
      try {
        const currentGrades = await getRecentGrades(childData.id);
        const lastGrades = lastCheckedGrades.get(childName) || [];
        const newGrades = findNewGrades(lastGrades, currentGrades);
        
        if (newGrades.length > 0) {
          const message = formatGradesMessage(childName, newGrades);
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
          // –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          await bot.telegram.sendMessage(CONFIG.adminId, message);
          console.log(`üì® –ù–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è ${childName}: ${newGrades.length} —à—Ç.`);
          anyNewGrades = true;
        }
        
        lastCheckedGrades.set(childName, currentGrades);
        
      } catch (error) {
        if (error.message === 'AUTH_ERROR') {
          console.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${childName}`);
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          if (isAdmin(CONFIG.adminId)) {
            await bot.telegram.sendMessage(CONFIG.adminId, 
              'üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.'
            );
          }
        } else {
          console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${childName}:`, error.message);
        }
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ—Ç–µ–π
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    if (!anyNewGrades && !authError) {
      console.log('‚úÖ –ù–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫ –Ω–µ—Ç —É –≤—Å–µ—Ö –¥–µ—Ç–µ–π');
    }
    
  } catch (error) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
  } finally {
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
    if (globalMonitoringActive) {
      setTimeout(() => checkForNewGrades(bot), CONFIG.checkInterval);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ü–µ–Ω–æ–∫
async function getManualGrades(childId, childName) {
  try {
    const grades = await getRecentGrades(childId);
    if (grades.length === 0) {
      return `üìù –£ ${childName} ${CONFIG.children[childName].emoji} –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è`;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –¥–∞—Ç–µ
    const gradesByDate = {};
    grades.forEach(grade => {
      if (!gradesByDate[grade.date]) {
        gradesByDate[grade.date] = [];
      }
      gradesByDate[grade.date].push(grade);
    });
    
    let message = `üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ ${childName} ${CONFIG.children[childName].emoji}:\n\n`;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é (—Å–≤–µ–∂–∏–µ —Å–Ω–∞—á–∞–ª–∞)
    const sortedDates = Object.keys(gradesByDate).sort((a, b) => 
      new Date(b.split('.').reverse().join('-')) - new Date(a.split('.').reverse().join('-'))
    );
    
    sortedDates.forEach(date => {
      const formattedDate = formatDate(date);
      message += `üìÖ ${formattedDate}:\n`;
      gradesByDate[date].forEach(grade => {
        const emoji = getGradeEmoji(grade.estimate_value_name);
        message += `‚Ä¢ ${grade.subject_name} - ${grade.estimate_value_name} ${emoji}\n`;
      });
      message += '\n';
    });
    
    return message.trim();
    } catch (error) {
    if (error.message === 'AUTH_ERROR') {
      return `üîê –ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.`;
    }
    return `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è ${childName}: ${error.message}`;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getKeyboardForUser(userId) {
  const baseButtons = [
    ['üëß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –í–∞—Ä—é', 'üë¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –í–∞–Ω—é', 'üë∂ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–æ—Ä—é']
  ];
  
  // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
  if (isAdmin(userId)) {
    if (globalMonitoringActive) {
      baseButtons.unshift(['üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥']);
    } else {
      baseButtons.unshift(['üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥']);
    }
  }
  
  return Markup.keyboard(baseButtons).resize();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–º–∞–Ω–¥–∞ /start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  
  let statusMessage = '';
  if (authError) {
    statusMessage = 'üîê *–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.*\n–û–±–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.';
  } else if (globalMonitoringActive) {
    statusMessage = '‚úÖ *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ü–µ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω!*\n–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.';
  } else {
    statusMessage = '‚è∏ *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ü–µ–Ω–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ü–µ–Ω–æ–∫.';
  }
  
  await ctx.reply(
    `üéì *–ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –¥–µ—Ç–µ–π*\n\n${statusMessage}\n\n +
    *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n +
    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –≤—Ä—É—á–Ω—É—é\n +
    ‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö\n\n +
    *–î–µ—Ç–∏:*\n +
    üëß –í–∞—Ä—è | üë¶ –í–∞–Ω—è | üë∂ –ë–æ—Ä—è`,
    {
      parse_mode: 'Markdown',
      ...getKeyboardForUser(userId)
    }
  );
});

// –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
bot.hears(/–ü—Ä–æ–≤–µ—Ä–∏—Ç—å (–í–∞—Ä—é|–í–∞–Ω—é|–ë–æ—Ä—é)/, async (ctx) => {
  const childMap = {
    '–í–∞—Ä—é': 'Varvara',
    '–í–∞–Ω—é': 'Ivan', 
    '–ë–æ—Ä—é': 'Boris'
  };
  
  const childKey = childMap[ctx.match[1]];
  const childData = CONFIG.children[childKey];
  
  try {
    await ctx.reply(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ—Ü–µ–Ω–∫–∏ –¥–ª—è ${childKey}...`);
    const message = await getManualGrades(childData.id, childKey);
    await ctx.reply(message);
  } catch (error) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${childKey}: ${error.message}`);
  }
});

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.hears('üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.');
    return;
  }
  
  if (globalMonitoringActive) {
    await ctx.reply('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!');
    return;
  }
  
  globalMonitoringActive = true;
  authError = false;
  
  await ctx.reply(
    'üéØ –ó–∞–ø—É—Å–∫–∞—é –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ü–µ–Ω–æ–∫!\n' +
    '‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n' +
    'üìÖ –°–ª–µ–∂—É –∑–∞ –æ—Ü–µ–Ω–∫–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è\n\n' +
    '‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...',
    getKeyboardForUser(ctx.from.id)
  );
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –æ—Ü–µ–Ω–æ–∫
  setTimeout(async () => {
    try {
      let initializedCount = 0;
      
      for (const [childName, childData] of Object.entries(CONFIG.children)) {
        const currentGrades = await getRecentGrades(childData.id);
        lastCheckedGrades.set(childName, currentGrades);
        console.log(`üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –±–∞–∑–∞ –¥–ª—è ${childName}: ${currentGrades.length} –æ—Ü–µ–Ω–æ–∫`);
        initializedCount += currentGrades.length;
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      
      await ctx.reply(
        `‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω!\n +
        üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${initializedCount} –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n +
        üîç –¢–µ–ø–µ—Ä—å –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ù–û–í–´–• –æ—Ü–µ–Ω–∫–∞—Ö`
      );
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      checkForNewGrades(bot);
      
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
      globalMonitoringActive = false;
      authError = true;
    }
  }, 2000);
});

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.hears('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.');
    return;
  }
  globalMonitoringActive = false;
  
  await ctx.reply(
    'üõë –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ü–µ–Ω–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n' +
    '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö.',
    getKeyboardForUser(ctx.from.id)
  );
  
  console.log('üõë –ê–¥–º–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command('stop', async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    return;
  }
  
  globalMonitoringActive = false;
  
  await ctx.reply(
    'üõë –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ü–µ–Ω–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!',
    getKeyboardForUser(ctx.from.id)
  );
});

// –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.help(ctx => ctx.reply(`
üìö *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

/start - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

*–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –≤—Ä—É—á–Ω—É—é
‚Ä¢ –í–∏–¥–µ—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

*–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*
‚Ä¢ –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö

*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ü–µ–Ω–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è
- –ü—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ù–û–í–´–• –æ—Ü–µ–Ω–∫–∞—Ö
- –†–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
`, { parse_mode: 'Markdown' }));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
});

process.on('unhandledRejection', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('uncaughtException', (error) => {
  console.error('–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  console.log('üë• –î–µ—Ç–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:');
  Object.entries(CONFIG.children).forEach(([name, data]) => {
    console.log(`   ${data.emoji} ${name} (ID: ${data.id})`);
  });
  console.log(`üëë –ê–¥–º–∏–Ω –±–æ—Ç–∞: ${CONFIG.adminId}`);
});

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  bot.stop('SIGTERM');
});