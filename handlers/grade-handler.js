import { getRecentGrades } from '../services/dnevnik-api.js';
import { formatManualGrades } from '../utils/formatters.js';
import { CONFIG } from '../config/index.js';

export const gradeHandler = (bot) => {
  bot.hears(/–ü—Ä–æ–≤–µ—Ä–∏—Ç—å (–í–∞—Ä—é|–í–∞–Ω—é|–ë–æ—Ä—é)/, async (ctx) => {
    const childNameMatch = ctx.match[1];
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º–µ–Ω–∞ –∏–∑ –≤–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–∂–∞ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π
    const nameMapping = {
      '–í–∞—Ä—é': '–í–∞—Ä—è',
      '–í–∞–Ω—é': '–í–∞–Ω—è', 
      '–ë–æ—Ä—é': '–ë–æ—Ä—è'
    };
    
    const childName = nameMapping[childNameMatch];
    
    if (!childName || !CONFIG.children[childName]) {
      await ctx.reply(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫: ${childNameMatch}`);
      return;
    }
    
    try {
      await ctx.reply(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ—Ü–µ–Ω–∫–∏ –¥–ª—è ${childName}...`);
      const childData = CONFIG.children[childName];
      const grades = await getRecentGrades(childData.id);
      const message = formatManualGrades(childName, grades);
      await ctx.reply(message);
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${childName}: ${error.message}`);
    }
  });
};
